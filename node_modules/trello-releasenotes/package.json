{
  "name": "trello-releasenotes",
  "description": "A simple nodejs trello release notes generator",
  "author": {
    "name": "Norbert Eder",
    "email": "wpfnerd+nodejs@gmail.com"
  },
  "homepage": "https://github.com/devtyr/trello-releasenotes",
  "bugs": "https://github.com/devtyr/trello-releasenotes/issues",
  "version": "0.9.0",
  "license": "MIT",
  "keywords": [
    "trello",
    "release",
    "notes",
    "markdown",
    "export",
    "templating"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/devtyr/trello-releasenotes.git"
  },
  "scripts": {
    "test": "node test/testrunner.js"
  },
  "dependencies": {
    "trello": ">=0.0.8",
    "restler": ">=2.0.1",
    "optimist": ">=0.3.4",
    "mu2": ">=0.5.17"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "devDependencies": {
    "nodeunit": ">=0.7.4"
  },
  "readme": "# trello-releasenotes\r\n\r\nA trello release notes generator for node.js\r\n\r\n## Installation\r\n\r\nYou can install it using `npm`.\r\n\r\n\tnpm install trello-releasenotes\r\n\r\n### Obtain a Trello token\r\n\r\nFirst, log in to Trello and open [Generate API Keys](https://trello.com/1/appKey/generate \"Generate API Keys\"). You'll receive an key to use in the next step.\r\n\r\nSecond, call https://trello.com/1/authorize?key=YOUR_KEY&name=trello-releasenotes&expiration=never&response_type=token to grant access for this application. Be sure to replace `YOUR_KEY` with the key received in the first step.\r\n\r\n> For further information visit: [Getting a Token from a User](https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user \"Getting a Token from a User\")\r\n\r\nStore the key from the first action in setting `applicationKey` of `settings.json` and the token received from the second step in `userToken`.\r\n\r\n\r\n## Usage\r\n\r\nThere are some settings you can set up in `settings.json`:\r\n\r\n\tapplicationKey\t\tInsert your obtained application key from Trello to get access to it\r\n\tuserToken\t\t\tDefine your user token you'll receive when obtaining an application ey\r\n\tboardId\t\t\t\tDefine the id of the board you want to search for release notes\r\n\treleaseIdentifier   Default is set to 'RELEASE:'\r\n\ttemplate\t\t\tDefines the template to use\r\n\texportLinks\t\t\tif true, links are written to the exported data; the default template is able to handle that\r\n\texportPath\t\t\tSet a path if release notes should be exported to a specific path\r\n\tstrings\t\t\t\tThese are used to create the export, translate them into your language if you want\r\n\r\n> `version` and `product` of `strings` are used to generate the filename. \r\n\r\n### How to obtain the board id\r\n\r\nWhen you open your Trello account you get a list of boards, open one of it and the URL will be something like\r\n\r\n\thttps://trello.com/board/boardname/identifier\r\n\r\nCopy `identifier` and set this one as the `boardId` in `settings.json`. This is used to search for lists if there is no command line option that overrides that setting.\r\n\r\n### Export\r\n\r\nTo export release notes start it like shown bellow:\r\n\r\n\tnode index.js -g [LISTNAME(S)]\r\n\r\nReplace `[LISTNAME(S)]` with the name of your list that contains the cards and release note for export. In this case the configured `boardId` from `settings.json` will be used to find the internal id of `[LISTNAME(S)]`. In case you have different boards, you can override the configured `boardId` by using the `-b` option.\r\n\r\n\tnode index.js -g [LISTNAME(S)] -b [BOARDID]\r\n\r\nIf you want to run a job updating your release notes it might be helpful to set the version by an parameter. This can be done by using the parameter `-v`.\r\n\r\n\tnode index.js -g [LISTNAME(S)] -b [BOARDID] -v [VERSION]\r\n\r\n### Example\r\n\r\nTo export all release notes of list 'Done' execute\r\n\r\n\tnode index.js -g Done\r\n\r\nIt is also possible to export release notes of several lists. Call it like this:\r\n\r\n\tnode index.js -g \"My List 1, My List 2\"\r\n\r\nThis will search `My List 1` and `My List 2` for cards having release notes.\r\n\r\n\r\nPlease note that the result is a `.markdown` file that can be processed with other modules like [ideamark](https://github.com/devtyr/ideamark \"ideamark\") or [mdserv](https://github.com/Bonuspunkt/mdserv \"mdserv\"). In this combination you can directly serve your exported release notes via HTTP.\r\n\r\n### Which cards will be exported?\r\n\r\nAll cards of the given list having comments that start with `RELEASE:` (default) are exported. If there are multiple entries having this \"flag\", all of them are exported. You are able to change this setting in `settings.json`, change `releaseIdentifier` to a value you like to use.\r\n\r\n> Please note that all lists (also archived ones) are considered.\r\n\r\n### Show available lists\r\n\r\nIn some cases it is very helpful to view the lists available within the configured board. To get an overview use the option `-l` or `--list`:\r\n\r\n\tnode index.js -l\r\n\r\nThis will come up with a complete list, showing the status (open, closed), list id and the name. It's also possible to get a list of a specific status. This options are available:\r\n\r\n\tnode index.js -l all       The same as -l without a parameter\r\n\tnode index.js -l open      Shows all lists that are not archived.\r\n\tnode index.js -l closed    Shows all archieved lists\r\n\r\n## Usage from other modules\r\n\r\nIt is also possible to use this module from another one. For example to receive all cards having release notes for the specified lists:\r\n\r\n\tvar TrelloReceiver = require('./lib/cardreceiver.js');\r\n\r\n\tvar lists = [\"list1\", \"list2\"];\r\n\tvar receiver = new TrelloReceiver(\"applicationKey\", \"userToken\", \"boardId\");\r\n\r\n\treceiver.receive(lists, function(err, cards) {\r\n\t\tif (err) {\r\n\t\t\t// handle error\r\n\t\t}\r\n\r\n\t\t// do something with your cards here\r\n\t});\r\n\r\nIt's also possible to work with lists:\r\n\r\n\treceiver.getLists(filter, function(error,data) {\r\n\t\tif (error) {\r\n\t\t\tconsole.log(error instanceof Error ? error.message : error);\r\n\t\t} else {\r\n\t\t\tif (data) {\r\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\r\n\t\t\t\t\tconsole.log((data[i].closed ? '[closed] ' : '[open]   ') + data[i].id + ' ' + data[i].name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t});\r\n\r\nThe filter defines (if set) which lists to be received. Possible values based on the Trello API:\r\n\r\n- none\r\n- open\r\n- closed\r\n- all\r\n\r\n## Templating\r\n\r\n**trello-releasenotes** uses [Mu - a fast, streaming Node.js Mustache engine](https://github.com/raycmorgan/Mu) as the templating engine. Have a look at the [documentation](http://mustache.github.com/mustache.5.html) to get familiar with Mustache. A simple template (it's the default of trello-releasenotes):\r\n\r\n\t# {{header}} {{product}}\r\n\t{{version}} **{{version_number}}**\r\n\r\n\t{{generated}} **{{date}}**\r\n\r\n\r\n\t## {{subheader}}\r\n\r\n\t{{#data}}\r\n\t**{{name}}**\r\n\t{{#labels}}  `{{name}}` {{/labels}}\r\n\r\n\t{{#releasenotes}}\r\n\t> {{singleNote}}\r\n\t \r\n\r\n\t{{/releasenotes}}\r\n\t{{/data}}\r\n\t{{^data}}\r\n\tNo release notes available!\r\n\t{{/data}}\r\n\r\nAs you are able to configure the used templates within `settings.json` you can add new templates easily. Otherwise feel free to change the existing ones.\r\n\r\nThis is the available structure for templating:\r\n\r\n\t{\r\n\t\t\"header\": \"\",\r\n\t\t\"product\": \"\",\r\n\t\t\"version\": \"\",\r\n\t\t\"version_number\": \"\",\r\n\t\t\"generated\": \"\",\r\n\t\t\"date\": \"\",\r\n\t\t\"subheader\": \"\",\r\n\t\t\"data\": \r\n\t\t\t[\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\t\"labels\": \"\",\r\n\t\t\t\t\t\"link\": \"\",\r\n\t\t\t\t\t\"releasenotes\": \r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t{ \"singleNote\": \"\" }\r\n\t\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t}\r\n\r\n`data` is an array of all found cards. `releasenotes` is an array of all release notes found for the card.\r\n\r\n## Upcoming Features\r\n\r\n* Generation of HTML and PDF output\r\n* Option to receive all lists for configured/specified board id\r\n\r\nIf there are bugs or ideas for this project please leave a ticket [here](https://github.com/devtyr/trello-releasenotes/issues).\r\n\r\n## Continuous Integration status\r\n\r\nThis project is tested with [Travis CI](http://travis-ci.org/).\r\n\r\n[![Build Status](https://secure.travis-ci.org/devtyr/trello-releasenotes.png)](http://travis-ci.org/devtyr/trello-releasenotes)\r\n\r\n## License\r\n\r\ntrello-releasenotes is licensed under MIT.\r\n\r\n\r\n[![endorse](http://api.coderwall.com/devtyr/endorsecount.png)](http://coderwall.com/devtyr)",
  "_id": "trello-releasenotes@0.9.0",
  "dist": {
    "shasum": "19a51b795d992e80a758c82c04bf3eceabaa1615",
    "tarball": "http://registry.npmjs.org/trello-releasenotes/-/trello-releasenotes-0.9.0.tgz"
  },
  "_npmVersion": "1.1.61",
  "_npmUser": {
    "name": "devtyr",
    "email": "wpfnerd+nodejs@gmail.com"
  },
  "maintainers": [
    {
      "name": "devtyr",
      "email": "wpfnerd+nodejs@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "19a51b795d992e80a758c82c04bf3eceabaa1615",
  "_resolved": "https://registry.npmjs.org/trello-releasenotes/-/trello-releasenotes-0.9.0.tgz",
  "_from": "trello-releasenotes@*"
}
